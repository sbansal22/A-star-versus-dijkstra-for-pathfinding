from data_processer import *
from Reader import *
import numpy as np
import networkx as nx
import sys
from datetime import datetime as dt
from datetime import timedelta as td
import timeit
from math import radians, cos, sin, asin, sqrt

# -----------------------------------------------------------------------------

def Euclidean(x, y, heuristic, traffic_level):
    '''
    Calculates the Euclidean distance between the cities x and
    y in miles, based on the input heuristic and traffic level

    Input - cities x and y
            heuristic type - euclidiean or manhatan
            traffic type - low, high
    Output - Euclidean or Manhatan Distance, adjusted with traffic

    '''

    # Obtaining the geographical location of the streets
    for i in street_hashmap:
        if x == street_hashmap[i]:
            if i in street_locations:
                x_loc = street_locations[i]
            else:
                # Geographical center of Boston, MA
                x_loc = (42.3601, -71.0589)
        if y == street_hashmap[i]:
            if i in street_locations:
                y_loc = street_locations[i]
            else:
                # Geographical center of Boston, MA
                y_loc = (42.3601, -71.0589)
    
    # Computing the manhatan distance based on the raw latitude and longitude
    # from the geographical locations for the streets
    if heuristic == 'Manhatan':
        return abs(x_loc[0]-y_loc[0]) + abs(x_loc[1]-y_loc[1])
    
    # Computing the euclidean distance between the street nodes after 
    # converting the geographical location to coordinates on the map
    else:
        a = sin((radians(y_loc[0]-x_loc[0]))/2)**2 + cos(x_loc[0]) * cos(y_loc[0]) * sin((radians(y_loc[1]-x_loc[1]))/2)**2
        dist_eu = 3956*(2*asin(sqrt(a)))

        # Returning the heuristic, which is a combination of the actual
        # geographical distance between the nodes as well as the traffic
        # based on the traffic function returned index
        return dist_eu * traffic(x, traffic_level)

# -----------------------------------------------------------------------------
def traffic(street, traffic_level):
    '''
    Creates a traffic adjustment index based on the input traffic
    level

    low - fair traffic conditions in the Boston City area
    high - bad traffic conditions in the Boston City area
    auto - time determined traffic conditions in the Boston City area

    Input - street in consideration
            given traffic_level
    Output - traffic adjustment index

    '''
    
    # Geographical center of Boston, MA
    boston_city = (42.3601, -71.0589)
    for i in street_hashmap:
        if street == street_hashmap[i]:
            if i in street_locations:
                x_loc = street_locations[i]
            else:
                x_loc = boston_city

    # Computing the distance of the current node from the Boston City center
    a = sin((radians(boston_city[0]-x_loc[0]))/2)**2 + cos(x_loc[0]) * cos(boston_city[0]) * sin((radians(boston_city[1]-x_loc[1]))/2)**2
    dist_eu = 3956*(2*asin(sqrt(a)))

    # If the node is with one mile of the city center, impose the traffic conditions
    if dist_eu < 1:
        if traffic_level == 'low':
            return 1.5
        if traffic_level == 'high':
            return 2.5
        if traffic_level == 'auto':
            # Computes the traffic conditions based on the current time
            current_time = dt.now()
            current_time = current_time.strftime("%H:%M:%S")
            if '8:00:00' < current_time < '9:00:00' or '17:00:00' < current_time < '18:00:00':
                return 2.5
            if '7:00:00' < current_time < '8:00:00' or '9:00:00' < current_time < '10:00:00' or '16:00:00' < current_time < '17:00:00' or '18:00:00' < current_time < '19:00:00':
                return 1.5
            else:
                return 1
    else:
        return 1

def astar(start, end, heuristic, traffic_level):
    '''
    Finds the optimal shortest path from a starting st. to the
    ending st. using Djikstra's Algorithm

    Input - Start: Starting St. Name
            End: Destination St. Name

    Output - Optimal Path to take

    '''
    nodelist = list(G.nodes())
    # A new dictionary to store the distances
    dist = dict()
    # A new dictionary to store the visited flag
    visited = dict()
    # A new dictionary to store the previous nodde name
    prev = dict()
    # A priority queue to hold the unprocessed nodes
    Priority = [start]

    # Initializing the dictionaries
    for street in nodelist:
        # None of the streets are visited
        visited[street] = False
        # None of the streets are mapped
        prev[street] = None
        # The initial distance to reach each
        # street is infinite miles
        dist[street] = 1000.0

    # The starting street is itself, hence it costs
    # no number of miles to reach it
    dist[start] = 0.0

    # We start on this street, so it is alreadt visited
    visited[start] = True

    while len(Priority) > 0:
        # Find the closest street to the street being
        # processed currently
        min_dist_street_i = 0
        for street in range(len(Priority)):
            if dist[Priority[street]] + Euclidean(Priority[street], end, heuristic, traffic_level) < dist[Priority[min_dist_street_i]] + Euclidean(Priority[min_dist_street_i],end, heuristic, traffic_level):
                min_dist_street_i = street 
        
        # Remove the street being currently processed
        # from the queue 
        curr = Priority.pop(min_dist_street_i)

        # Mark the current street as visited
        visited[curr] = True

        if curr == end:
            # Store the path to the end street from the start street
            end_copy = end
            directions = []
            while end_copy:
                directions.append(end_copy)
                end_copy = prev[end_copy]

            # Arrange the streets to make the tour suggestions
            output_directions = [ele for ele in reversed(directions)] 

            # Intializing variables
            output_distance = 0.0
            time = 0
            avg_speed = 25 #mph

            # Computing the total distance traveled and the total time taken, based
            # on the traffic conditions
            for i in range(len(output_directions)-1):
                output_distance += float(G.edges[output_directions[i],output_directions[i+1]]['weight'])
                time += output_distance*10*traffic(output_directions[i], traffic_level)/avg_speed

            # Computes the ETA
            current_time = dt.now()
            dest_time = current_time + td(hours=time)
            dest_time = dest_time.strftime("%H:%M:%S")
            current_time = current_time.strftime("%H:%M:%S")

            # Return the processed path if we have iterated over the destination
            return output_directions, output_distance*10, time*60, dest_time, current_time

        # Find out all the neighbors of the current street,
        # or the streets that connect to this street
        neighbors = list(G.neighbors(curr))
        temp_list = []
        for neighbor in neighbors:
            if visited[neighbor] != True:
                temp_list.append(neighbor)
        neighbors = temp_list

        # Compare the current interation distance for the street
        # with the previously stored min distance
        # Update it if it is more optimal / better
        # Add all its unvisited neighbors to the priority queue
        for unvisited_neighbor in neighbors:
            if dist[curr] + float(G.edges[curr,unvisited_neighbor]['weight']) < dist[unvisited_neighbor]:
                dist[unvisited_neighbor] = dist[curr] + float(G.edges[curr,unvisited_neighbor]['weight'])
                prev[unvisited_neighbor] = curr
                Priority.append(unvisited_neighbor)
    
if __name__ == "__main__":
    # dist = Euclidean('Newbury Street, Boston', 'Boylston Street, Boston')
    From, To, Miles, G = readMyFile('St-Data-Original - Processed.csv')
    street_locations = {0: (42.304017, -71.064578), 1: (42.3008855, -71.0637859), 2: (42.321425, -71.113213), 3: (42.320019, -71.116333), 4: (42.3536223, -71.1781017), 5: (42.3554211, -71.0690075), 6: (42.2525963, -71.1212212), 7: (42.326548, -71.104135), 8: (42.3279285, -71.1048971), 9: (42.3382196, -71.031435), 10: (42.3374411, -71.0281672), 11: (42.3568331, -71.1836782), 12: (42.293914, -71.069607), 13: (42.311685, -71.097638), 14: (42.31595, -71.090431), 16: (42.378856, -71.032359), 17: (42.310495, -71.062312), 18: (42.301719, -71.075517), 19: (42.2935384, -71.0783921), 20: (42.342192, -71.057091), 21: (42.3450455, -71.0768385), 22: (42.320094, -71.102625), 23: (42.3440542, -71.1426459), 24: (42.2802855, -71.0860598), 25: (42.275517, -71.07833), 26: (42.336139, -71.1782291), 27: (42.3406056, -71.1510169), 28: (42.3595966, -71.0557564), 29: (42.3673548, -71.0529556), 30: (42.3500548, -71.0774775), 31: (42.3732116, -71.0361746), 32: (42.320834, -71.104624), 33: (42.319669, -71.099008), 34: (42.316016, -71.100812), 35: (42.3769394, -71.0564846), 36: (42.3835971, -71.0714004), 37: (42.272775, -71.087054), 38: (42.272458, -71.085124), 39: (42.310303, -71.067843), 40: (42.3301312, -71.047953), 41: (42.3565277, -71.0728935), 42: (42.3580348, -71.1479387), 44: (42.271709900000005, -71.09540780532785), 45: (42.305122, -71.083308), 46: (42.3695343, -71.0412457), 47: (42.3078596, -71.0807533), 48: (42.354836, -71.134395), 49: (42.313726, -71.115404), 50: (42.3329651, -71.1718644), 51: (42.3560785, -71.0722875), 52: (42.3896109, -71.0711719), 54: (42.3542895, -71.059571), 55: (42.275403, -71.161189), 56: (42.3492309, -71.0886892), 57: (42.3466765, -71.0849886), 58: (42.352538, -71.160505), 59: (42.3667528, -71.0676195), 60: (42.331195, -71.1095992), 61: (42.3596311, -71.0518037), 62: (42.356866, -71.0560055), 63: (42.3536766, -71.0715866), 64: (42.3503532, -71.086427), 65: (42.2356414, -71.1335837), 66: (42.3189639, -71.0544287), 67: (42.3162403, -71.0525908), 68: (42.305535, -71.071343), 69: (42.3497136, -71.0504132), 70: (42.3525392, -71.0524452), 71: (42.3696172, -71.0377164), 72: (42.321479, -71.079573), 73: (42.3179996, -71.067301), 74: (42.256853, -71.1212067), 75: (42.37416, -71.0583371), 77: (42.3553228, -71.0750555), 78: (42.3095034, -71.0495463), 79: (42.3102686, -71.0504675), 80: (42.316892, -71.106892), 81: (42.3835396, -71.0217866), 82: (42.3839014, -71.0193069), 83: (42.298122, -71.070936), 84: (42.287105, -71.084269), 85: (42.288539, -71.082318), 86: (42.3563732, -71.0624614), 87: (42.3854059, -71.0776324), 88: (42.3476306, -71.0730797), 89: (42.304894, -71.059925), 90: (42.2800487, -71.0589541), 91: (42.297187, -71.066864), 92: (42.3346494, -71.086959), 93: (42.3341866, -71.0850645), 94: (42.33083, -71.10437), 95: (42.331394, -71.101439), 96: (42.3488013, -71.1327276), 97: (42.3470614, -71.1371948), 98: (42.381944, -71.077952), 99: (42.3798663, -71.0644891), 100: (42.323628, -71.081039), 101: (42.323113, -71.079473), 102: (42.3638781, -71.0629109), 103: (42.3710135, -71.0616785), 104: (42.2849071, -71.1271237), 105: (42.2858079, -71.0640963), 106: (42.288288, -71.059768), 107: (42.3502469, -71.1314516), 108: (42.3639889, -71.1353497), 109: (42.3373912, -71.1511559), 110: (42.338352, -71.1528837), 111: (42.343922, -71.069478), 112: (42.343279, -71.069646), 113: (42.3569208, -71.0702838), 114: (42.2934262, -71.0649395), 115: (42.279796, -71.1619291), 116: (42.303572, -71.077516), 117: (42.301089, -71.073416), 118: (42.309965, -71.0921124), 119: (42.310815, -71.086493), 120: (42.3484958, -71.0394071), 121: (42.3325654, -71.0515946), 122: (42.353511, -71.136001), 123: (42.3545014, -71.1278469), 124: (42.3295558, -71.0573421), 125: (42.3326285, -71.0674274), 126: (42.322827, -71.10837), 127: (42.324552, -71.112259), 128: (42.3181184, -71.0605991), 129: (42.3185022, -71.0576286), 130: (42.273805, -71.072687), 131: (42.272561, -71.073174), 132: (42.305926, -71.064883), 133: (42.3484068, -71.140445), 135: (42.290722, -71.065822), 136: (42.3511187, -71.1678435), 137: (42.309759, -71.065439), 138: (42.3848662, -71.0745985), 139: (42.285244, -71.08057), 140: (42.3814383, -71.0694095), 141: (42.315154, -71.05528), 142: (42.3102626, -71.0517616), 143: (42.289769, -71.10946), 144: (42.3784675, -71.0229001), 145: (42.3808579, -71.0249786), 146: (42.319157, -71.109091), 147: (42.3807453, -71.0718719), 148: (42.3798735, -71.0271973), 149: (42.328856, -71.0706384), 150: (42.3594239, -71.0629285), 151: (42.3259609, -71.083479), 152: (42.3616973, -71.0573035), 153: (42.3621936, -71.0669926), 154: (42.3641092, -71.068579), 155: (42.288895, -71.079445), 156: (42.287335, -71.08621), 157: (42.2873421, -71.0874369), 158: (42.3136044, -71.1206515), 159: (42.3170127, -71.0609603), 160: (42.3552362, -71.0540266), 161: (42.3776608, -71.0626179), 162: (42.330826, -71.080646), 163: (42.325926, -71.0765254), 164: (42.342317, -71.082171), 165: (42.38151, -71.080686), 167: (42.254267, -71.128027), 168: (42.312972, -71.116362), 169: (42.3117356, -71.1175594), 170: (42.3744678, -71.0678141), 171: (42.364513, -71.0628999), 172: (42.287325, -71.073059), 173: (42.3017579, -71.0615654), 174: (42.3528032, -71.0594424), 176: (42.3443471, -71.087194), 177: (42.345405, -71.089517), 178: (42.355738, -71.132801), 179: (42.3367845, -71.0504836), 180: (42.3394813, -71.1572454), 181: (42.310351, -71.1075862), 182: (42.3487908, -71.0855027), 183: (42.3504953, -71.0686605), 184: (42.3453654, -71.1042823), 185: (42.34625, -71.1049067), 186: (42.313713, -71.054267), 187: (42.3801174, -71.0252627), 188: (42.3140821, -71.03980824312268), 189: (42.337196, -71.148956), 190: (42.3540169, -71.0744199), 191: (42.351953, -71.1303199), 192: (42.3518566, -71.121829), 193: (42.3847674, -71.0393169), 194: (42.319301, -71.107528), 195: (42.293693, -71.11907), 196: (42.3048438, -71.1057102), 197: (42.331797, -71.100587), 198: (42.3158395, -71.0623744), 199: (42.326646, -71.08542), 200: (42.3233469, -71.0876127), 201: (42.3659175, -71.0520842), 202: (42.3459928, -71.0614954), 203: (42.3409876, -71.0635879), 204: (42.3193887, -71.1030726), 205: (42.324546, -71.104172), 206: (42.324735, -71.107465), 207: (42.393632, -71.011495), 208: (42.28451, -71.086218), 209: (42.28184, -71.10051), 210: (42.3357003, -71.0869399), 211: (42.3601275, -71.0614783), 212: (42.3454741, -71.0781933), 213: (42.3393993, -71.1493728), 214: (42.3175381, -71.0992238), 215: (42.380547, -71.038967), 216: (42.3766174, -71.0615286), 217: (42.316465, -71.1032602), 218: (42.293042, -71.121856), 219: (42.3045505, -71.0777498), 220: (42.321276, -71.103986), 221: (42.3614145, -71.0628126), 222: (42.3347179, -71.0327566), 223: (42.3328698, -71.04628930400995), 224: (42.353511, -71.136001), 225: (42.3473421, -71.0520159), 226: (42.358428, -71.1583554), 227: (42.356726, -71.1540271), 228: (42.3529891, -71.136701), 229: (42.3520265, -71.1386024), 230: (42.3629118, -71.0650957), 231: (42.3525537, -71.1370898), 232: (42.3328971, -71.0684427), 233: (42.2642256, -71.1010081), 234: (42.306456, -71.070296), 235: (42.3634561, -71.0530111), 236: (42.376353, -71.06076890576435), 237: (42.3785357, -71.0658455), 238: (42.37892, -71.067043), 239: (42.3617761, -71.0607648), 240: (42.286209, -71.125889), 241: (42.3336167, -71.1059115), 242: (42.3374087, -71.109932), 243: (42.3416969, -71.0501541), 244: (42.3367845, -71.0504836), 245: (42.35005, -71.0593706), 246: (42.284626, -71.090193), 247: (42.3110707, -71.0539024), 248: (42.3843053, -71.0747793), 249: (42.3588047, -71.0537998), 250: (42.3479573, -71.0785287), 251: (42.3522835, -71.0808552), 252: (42.3750202, -71.0393784), 253: (42.3569737, -71.0677675), 254: (42.3501702, -71.0916256), 255: (42.320366, -71.105214), 256: (42.3522247, -71.057615), 257: (42.2938382, -71.0471811), 258: (42.3370414, -71.2092214), 259: (42.3322905, -71.035849), 260: (42.3328481, -71.0511311), 261: (42.3531008, -71.0547826), 262: (42.3655034, -71.0611978), 263: (42.358606, -71.065076), 265: (42.3314206, -71.0750114), 266: (42.3140821, -71.03980824312268), 267: (42.3383862, -71.0837766), 268: (42.3634593, -71.0500799), 269: (42.335916, -71.024078), 270: (42.3221035, -71.0500634), 271: (42.2486175, -71.1189452), 272: (42.3330372, -71.0398933), 273: (42.343225, -71.1028177), 274: (42.3491247, -71.0949877), 275: (42.3515301, -71.1190824), 276: (42.381336, -71.028211), 277: (42.3706179, -71.0615727), 278: (42.3500081, -71.0447409), 279: (42.3608975, -71.0613168), 280: (42.3664741, -71.0546855), 281: (42.340423, -71.144013), 282: (42.3316697, -71.0441406), 283: (42.3322653, -71.0373323), 284: (42.300453, -71.069558), 285: (42.3655769, -71.0364944), 286: (42.3650064, -71.064166), 287: (42.314692, -71.081148), 288: (42.313681, -71.081632), 289: (42.286867, -71.088508), 290: (42.3590003, -71.058625), 291: (42.320693, -71.107276), 292: (42.3347547, -71.0711923), 293: (42.3382449, -71.0728812), 294: (42.3249, -71.107821), 295: (42.274427, -71.092097), 296: (42.277008, -71.086223), 297: (42.3406967, -71.0486133), 298: (42.3330174, -71.0249793), 299: (42.344469, -71.137827), 300: (42.3828799, -71.0215095), 301: (42.312886, -71.059549), 302: (42.3576482, -71.0532294), 303: (42.3578342, -71.0517579), 304: (42.3439402, -71.0616044), 305: (42.312041, -71.075125), 306: (42.314473, -71.100679), 307: (42.3456166, -71.08219), 308: (42.3622759, -71.0686206), 309: (42.3554148, -71.059263), 310: (42.3536753, -71.0580245), 311: (42.2722104, -71.0909408), 312: (42.271827, -71.090168), 313: (42.3484477, -71.0604701), 314: (42.3347649, -71.0353997), 315: (42.329539, -71.101814), 316: (42.290215, -71.074928), 318: (42.288943, -71.060189), 319: (42.290525, -71.057557), 320: (42.325356, -71.106329), 321: (42.292987, -71.064782), 322: (42.2927866, -71.065595), 323: (42.373003, -71.041188), 324: (42.375617, -71.035148), 325: (42.3767654, -71.0561615), 326: (42.3387852, -71.0703681), 327: (42.310693, -71.05864), 328: (42.273788, -71.090858), 329: (42.355148, -71.135526), 330: (42.2713412, -71.0779195), 331: (42.267551, -71.110898), 332: (42.306072, -71.076587), 333: (42.271267, -71.092484), 334: (42.272124, -71.088888), 335: (42.3475844, -71.065728), 336: (42.302258, -71.056317), 337: (42.3109, -71.062294), 338: (42.324154, -71.055041), 339: (42.3258913, -71.0782021), 340: (42.3110911, -71.0566242), 341: (42.333837, -71.053307), 342: (42.333493, -71.052882), 343: (42.367226, -71.054685), 344: (42.313204, -71.058119), 345: (42.2514444, -71.1157514), 346: (42.327541, -71.089916), 347: (42.387222, -71.074854), 348: (42.287531, -71.059327), 350: (42.28059, -71.093681), 351: (42.284509, -71.095087), 352: (42.283287, -71.084199), 353: (42.303907, -71.057372), 354: (42.301651, -71.057965), 355: (42.353335, -71.156608), 356: (42.353822, -71.155701), 357: (42.313114, -71.077274), 358: (42.3819593, -71.0334049), 359: (42.381951, -71.030296), 360: (42.2903553, -71.0738581), 361: (42.323392, -71.079887), 362: (42.350505, -71.154913), 363: (42.332813, -71.076119), 364: (42.2655951, -71.105987), 365: (42.3481198, -71.1323163), 366: (42.27682, -71.095213), 367: (42.3331872, -71.0312123), 368: (42.286422, -71.128808), 369: (42.28817, -71.125053), 370: (42.292351, -71.06036), 371: (42.311865, -71.076686), 372: (42.311891, -71.080743), 373: (42.3638137, -71.0576726), 374: (42.3664432, -71.0416446), 375: (42.3346226, -71.0333177), 376: (42.350879, -71.0687562), 377: (42.2479204, -71.1285105), 378: (42.3801078, -71.0672034), 379: (42.3239818, -71.1053487), 380: (42.302362, -71.058235), 381: (42.3463978, -71.0882262), 382: (42.3440103, -71.0901672), 383: (42.2494319, -71.1169096), 384: (42.29167, -71.060042), 385: (42.289587, -71.122182), 386: (42.3363558, -71.0432834), 387: (42.3428168, -71.0618055), 388: (42.303032, -71.07375), 389: (42.331111, -71.108712), 390: (42.3513099, -71.1413712), 391: (42.308054, -71.089603), 392: (42.330164, -71.090824), 393: (42.331354, -71.093955), 394: (42.316097, -71.054237), 395: (42.3701014, -71.0398918), 396: (42.3415974, -71.146277), 397: (42.324863, -71.08709), 398: (42.317768, -71.097403), 399: (42.378659, -71.068987), 400: (42.33381, -71.08311), 401: (42.321932, -71.103317), 402: (42.2882651, -71.0727492), 403: (42.326687, -71.071479), 404: (42.3698379, -71.0363771), 405: (42.3645714, -71.0298179), 406: (42.3536546, -71.1378124), 407: (42.356282, -71.135274), 408: (42.3358977, -71.0551787), 409: (42.3315426, -71.1119043), 410: (42.275582, -71.111262), 411: (42.350748, -71.1638), 413: (42.2351682, -71.1317375), 414: (42.3393634, -71.1470997), 415: (42.3406718, -71.1484903), 416: (42.290726, -71.077999), 417: (42.279179, -71.097241), 418: (42.2763124, -71.1047238), 419: (42.3481564, -71.073979), 420: (42.3459684, -71.0752972), 421: (42.312749, -71.102263), 422: (42.312671, -71.104001), 423: (42.282286, -71.09712), 424: (42.282683, -71.098163), 425: (42.274219, -71.084882), 426: (42.303072, -71.068165), 427: (42.382611, -71.033432), 428: (42.292366, -71.058041), 429: (42.3158526, -71.0900902), 430: (42.3499226, -71.1332769), 431: (42.3487394, -71.1380082), 432: (42.311856, -71.111399), 433: (42.330779, -71.096564), 434: (42.369305, -71.0325295), 435: (42.3212296, -71.0558618), 436: (42.290373, -71.122811), 437: (42.34814, -71.0385342), 438: (42.3353474, -71.083153), 439: (42.336045, -71.0842784), 440: (42.286221, -71.094999), 441: (42.316142, -71.070997), 442: (42.34974, -71.134269), 443: (42.3541956, -71.0539964), 444: (42.3111773, -71.1187741), 445: (42.333529, -71.0497294), 446: (42.325209, -71.108581), 447: (42.333812, -71.0545479), 448: (42.3322308, -71.0529311), 449: (42.3514411, -71.0697216), 450: (42.311062, -71.115682), 451: (42.27583, -71.089864), 452: (42.316934, -71.088913), 453: (42.317602, -71.093133), 454: (42.320764, -71.115566), 455: (42.304017, -71.064578), 456: (42.3615029, -71.0561715), 457: (42.2389642, -71.1358766), 458: (42.3306363, -71.0360236), 459: (42.3191833, -71.0876449), 460: (42.316574, -71.090156), 461: (42.352653, -71.158061), 462: (42.3434935, -71.0643452), 463: (42.3345572, -71.0781467), 464: (42.3434534, -71.0583235), 465: (42.338317, -71.0709521), 466: (42.3549917, -71.1255659), 467: (42.3721925, -71.061945), 468: (42.3481247, -71.0611242), 469: (42.30827, -71.1166176), 470: (42.311938, -71.103821), 471: (42.346181, -71.152921), 472: (42.26033, -71.12589), 473: (42.3725195, -71.034817), 474: (42.3627154, -71.0609554), 475: (42.3561404, -71.0577645), 476: (42.295414, -71.067833), 477: (42.319451, -71.09232), 478: (42.3689906, -71.0398485), 479: (42.294285, -71.073327), 480: (42.278622, -71.095396), 481: (42.310461, -71.108528), 482: (42.291574, -71.073502), 483: (42.3545332, -71.0563545), 484: (42.3543792, -71.1314093), 485: (42.272754, -71.075372), 486: (42.256855, -71.127738), 487: (42.286707, -71.125317), 488: (42.270043, -71.08201), 489: (42.320152, -71.084435), 490: (42.2583868, -71.1592898), 491: (42.271328, -71.1233391), 492: (42.271502, -71.088859), 493: (42.3513593, -71.0605206), 494: (42.366315, -71.056541), 495: (42.356624, -71.0716691), 496: (42.3283485, -71.092502), 497: (42.310515, -71.065), 499: (42.342702, -71.151156), 500: (42.290023, -71.066874), 501: (42.3521537, -71.1294193), 502: (42.274358, -71.074638), 503: (42.351287, -71.139312), 504: (42.242847, -71.13674), 505: (42.3280486, -71.1075921), 506: (42.327383, -71.104194), 507: (42.331396, -71.104978), 508: (42.321747, -71.093239), 509: (42.3670294, -71.12455807532677), 510: (42.3058696, -71.0626449), 511: (42.286423, -71.08293), 512: (42.285293, -71.082747), 513: (42.3091309, -71.1209069), 514: (42.358071, -71.064714), 515: (42.306521, -71.062901), 516: (42.316329, -71.091768), 517: (42.27954, -71.151602), 518: (42.311172, -71.068301), 519: (42.3378396, -71.0828394), 520: (42.3454249, -71.1055884), 521: (42.3458081, -71.0967761), 522: (42.349794, -71.135078), 523: (42.281363, -71.089739), 524: (42.2953818, -71.0791122), 525: (42.2944336, -71.0835936), 526: (42.35172, -71.059691), 527: (42.345772, -71.157887), 528: (42.35084, -71.0614347), 529: (42.347005, -71.16168), 530: (42.346623, -71.176387), 531: (42.2582187, -71.1212228), 532: (42.3397464, -71.1453564), 533: (42.3403606, -71.1493216), 534: (42.283122, -71.09027), 535: (42.3475181, -71.0917267), 536: (42.3329442, -71.0490301), 537: (42.3843004, -71.0770317), 538: (42.2906992, -71.0757741), 539: (42.347341, -71.06306), 540: (42.3481823, -71.0625111), 541: (42.3089574, -71.0519076), 542: (42.3662178, -71.0406893), 543: (42.3056855, -71.0634002), 544: (42.349537, -71.150001), 545: (42.313979, -71.102069), 546: (42.348144, -71.068381), 547: (42.285239, -71.085455), 548: (42.297276, -71.056659), 549: (42.266864, -71.13017), 550: (42.3532509, -71.062796), 551: (42.345342, -71.080259), 552: (42.3258911, -71.0628657), 553: (42.326822, -71.069484), 554: (42.292961, -71.0694), 555: (42.276639, -71.097568), 556: (42.3712619, -71.0434589), 557: (42.315141, -71.10253), 558: (42.3800405, -71.0684042), 559: (42.344124, -71.149982), 560: (42.311926, -71.058298), 561: (42.315354, -71.101389), 562: (42.272786, -71.077255), 563: (42.276762, -71.08027), 564: (42.3596671, -71.0543974), 565: (42.313371, -71.104376), 566: (42.3636494, -71.0610093), 567: (42.3793515, -71.0698424), 568: (42.284089, -71.088216), 569: (42.349168, -71.135803), 570: (42.3741282, -71.0328065), 571: (42.3671285, -71.0357151), 572: (42.332139, -71.107253), 573: (42.3331164, -71.0353111), 574: (42.3566671, -71.1622797), 575: (42.272351, -71.074336), 576: (42.302538, -71.063035), 577: (42.3789662, -71.0593525), 578: (42.3741185, -71.0622635), 579: (42.28729, -71.12012), 580: (42.2832298, -71.1138521), 581: (42.302429, -71.074731), 582: (42.2912064, -71.079183), 583: (42.3534393, -71.0578654), 584: (42.3256985, -71.10868), 585: (42.308934, -71.099737), 586: (42.3612761, -71.1412549), 587: (42.371991, -71.059486), 588: (42.3611286, -71.0663833), 589: (42.3609257, -71.0700404), 590: (42.3638375, -71.0572425), 591: (42.366438, -71.057963), 592: (42.3638356, -71.05339806659825), 593: (42.381086, -71.026389), 594: (42.3591063, -71.1427388), 595: (42.3627523, -71.0536229), 596: (42.294439, -71.064572), 597: (42.304193, -71.067068), 598: (42.3498231, -71.0928699), 599: (42.355784, -71.137248), 600: (42.302283, -71.073445), 601: (42.3504593, -71.0608787), 602: (42.282802, -71.081871), 603: (42.288257, -71.0814), 604: (42.288244, -71.0836), 605: (42.332364, -71.106374), 606: (42.3293443, -71.0527567), 607: (42.286068, -71.16146), 608: (42.3293443, -71.0527567), 609: (42.31393215, -71.03483102627192), 610: (42.33012, -71.066951), 611: (42.3672814, -71.12204704999999), 612: (42.3420274, -71.0873309), 613: (42.3402796, -71.1544895), 614: (42.356801, -71.060432), 615: (42.3846499, -71.0772534), 616: (42.278946, -71.082187), 617: (42.340934, -71.099891), 618: (42.3436979, -71.0973964), 619: (42.3740233, -71.0600531), 620: (42.2923142, -71.0773411), 621: (42.328273, -71.1103291), 622: (42.3292269, -71.0542621), 623: (42.3709443, -71.0365981), 624: (42.289283, -71.086689), 625: (42.3802933, -71.0699707), 626: (42.330792, -71.068601), 627: (42.3829008, -71.0679708), 628: (42.342256, -71.069534), 629: (42.2583205, -71.1287104), 630: (42.253907, -71.138959), 631: (42.2823031, -71.1273236), 632: (42.305202, -71.078771), 633: (42.304215, -71.07839), 634: (42.3446108, -71.1003536), 635: (42.303615, -71.11361), 636: (42.3003541, -71.1076898), 637: (42.330873, -71.094177), 638: (42.3149226, -71.0582715), 639: (42.339714, -71.075247), 640: (42.316627, -71.055104), 641: (42.316097, -71.123632), 642: (42.391417, -71.0129453), 643: (42.380602, -71.027751), 644: (42.31042, -71.0529309), 645: (42.315984, -71.054713), 647: (42.3774059, -71.0547817), 648: (42.3796149, -71.0608523), 649: (42.289069, -71.06701), 650: (42.29228, -71.069294), 651: (42.3477773, -71.0364705), 652: (42.310064, -71.11034), 653: (42.341709, -71.07256), 654: (42.37712, -71.039899), 655: (42.3082752, -71.1001556), 656: (42.3351549, -71.0998729), 657: (42.2941222, -71.0796381), 658: (42.3345455, -71.0859598), 659: (42.333584, -71.084336), 660: (42.3592744, -71.0627712), 661: (42.270295, -71.083432), 662: (42.318105, -71.079664), 663: (42.32363, -71.11087), 664: (42.304221, -71.114076), 665: (42.3409184, -71.08986045069982), 666: (42.3570939, -71.0694712), 667: (42.3502125, -71.068577), 668: (42.3464288, -71.0788844), 669: (42.34395, -71.072695), 670: (42.315269, -71.053777), 671: (42.316271, -71.080319), 672: (42.345279, -71.088717), 673: (42.306994, -71.075163), 674: (42.267692, -71.172721), 675: (42.308064, -71.066423), 676: (42.308592, -71.067055), 677: (42.3495373, -71.0762207), 678: (42.3483389, -71.0732835), 679: (42.290901, -71.087626), 680: (42.289754, -71.084039), 681: (42.3521717, -71.0673903), 682: (42.277088, -71.078812), 683: (42.277354, -71.079357), 684: (42.3482686, -71.0730973), 685: (42.3733942, -71.0663892), 686: (42.3304014, -71.1685215), 687: (42.3800475, -71.0661242), 688: (42.336602, -71.0292664), 689: (42.3208813, -71.0541167), 690: (42.3602534, -71.0582912), 691: (42.344198, -71.068618), 692: (42.310536, -71.063723), 693: (42.307884, -71.112742), 694: (42.256245, -71.129467), 695: (42.3263728, -71.0994823), 696: (42.283505, -71.08664), 697: (42.287874, -71.075358), 698: (42.326592, -71.088844), 699: (42.321471, -71.094299), 700: (42.3325316, -71.1079563), 701: (42.341251, -71.15758), 702: (42.3345378, -71.0895089), 703: (42.314764, -71.086878), 704: (42.329442, -71.072386), 705: (42.3298286, -71.0746607), 706: (42.3426365, -71.0768857), 707: (42.327881, -71.081509), 708: (42.2823206, -71.0950513), 709: (42.3348222, -71.0837033), 710: (42.3476878, -71.065707), 711: (42.3551482, -71.0618916), 712: (42.2705214, -71.1516024), 714: (42.303562, -71.10696), 715: (42.355906, -71.164974), 716: (42.3490448, -71.1506574), 717: (42.283302, -71.074332), 718: (42.3569494, -71.0532751), 719: (42.3573097, -71.0523283), 720: (42.357971, -71.0530107), 721: (42.314238, -71.087094), 722: (42.286426, -71.072198), 723: (42.3422621, -71.0522271), 724: (42.341473, -71.074713), 725: (42.345022, -71.071817), 726: (42.34107, -71.0742191), 727: (42.36031, -71.0678007), 728: (42.3140821, -71.03980824312268), 729: (42.3237216, -71.1072957), 730: (42.284777, -71.094318), 731: (42.280786, -71.096375), 732: (42.379305, -71.035341), 733: (42.3331183, -71.0877), 734: (42.3653054, -71.0542542), 735: (42.3657662, -71.0542579), 736: (42.336602, -71.0292664), 737: (42.3383742, -71.0250635), 738: (42.3330372, -71.0398933), 739: (42.308327, -71.072864), 740: (42.3059515, -71.07268456461864), 741: (42.32172, -71.101792), 742: (42.3640732, -71.0633754), 743: (42.2501988, -71.111043), 744: (42.320631, -71.075005), 747: (42.297685, -71.071595), 748: (42.313657, -71.072138), 749: (42.323278, -71.113852), 750: (42.328946, -71.079124), 751: (42.3396722, -71.0670177), 752: (42.3502692, -71.0660021), 754: (42.3374285, -71.0686717), 755: (42.2559354, -71.1213719), 756: (42.2636524, -71.1017239), 757: (42.317238, -71.080184), 758: (42.3268558, -71.056331), 759: (42.2850157, -71.0442856), 760: (42.2855863, -71.1484756), 761: (42.305038, -71.110102), 762: (42.313374, -71.070517), 763: (42.310878, -71.090485), 764: (42.307077, -71.076637), 765: (42.315212, -71.085681), 766: (42.3336533, -71.0886764), 767: (42.372649, -71.0642387), 768: (42.3658946, -71.0573608), 769: (42.3747892, -71.0555724), 770: (42.3791714, -71.0513414), 771: (42.3751553, -71.0549901), 772: (42.374945049999994, -71.05093100753925), 773: (42.3754626, -71.053528), 774: (42.3781288, -71.0510111), 776: (42.340125, -71.0929868), 777: (42.286068, -71.16146), 779: (42.3616973, -71.0573035), 781: (42.3578104, -71.0577759), 782: (42.35319335, -71.05261158509919), 783: (42.3578104, -71.0577759), 784: (42.3638356, -71.05339806659825), 785: (42.2389642, -71.1358766), 786: (42.2389642, -71.1358766), 787: (42.3664741, -71.0546855), 788: (42.3587798, -71.0711332), 789: (42.3119134, -71.1126887), 791: (42.359448, -71.072118), 792: (42.3584825, -71.0711191), 794: (42.3087476, -71.1225277), 795: (42.266719, -71.168803), 796: (42.3208813, -71.0541167), 797: (42.3189639, -71.0544287), 798: (42.2938382, -71.0471811), 799: (42.342192, -71.057091), 800: (42.3563732, -71.0624614), 801: (42.3301312, -71.047953), 802: (42.27954, -71.151602), 803: (42.3109, -71.062294), 804: (42.313283, -71.065825), 805: (42.315867, -71.067102), 806: (42.310495, -71.062312), 807: (42.2858079, -71.0640963), 808: (42.3440542, -71.1426459), 809: (42.304156, -71.080297), 810: (42.304156, -71.080297), 811: (42.308054, -71.089603), 812: (42.30217, -71.08118), 813: (42.3017188, -71.0851878), 814: (42.28184, -71.10051), 815: (42.301719, -71.075517), 816: (42.3078596, -71.0807533), 817: (42.271709900000005, -71.09540780532785), 818: (42.327637, -71.073942), 819: (42.319406, -71.075773), 820: (42.281508, -71.150504), 821: (42.310303, -71.067843), 822: (42.318422, -71.076009), 823: (42.320631, -71.075005), 824: (42.3179996, -71.067301), 825: (42.3185022, -71.0576286), 827: (42.31935, -71.06644), 828: (42.318462, -71.0663885), 830: (42.293689, -71.160709), 831: (42.3093124, -71.0827572), 832: (42.310815, -71.086493), 833: (42.35005, -71.0593706), 834: (42.3387852, -71.0703681), 837: (42.33687295, -71.09930259662842), 838: (42.3481198, -71.1323163), 840: (42.2987471, -71.0721041), 841: (42.301034, -71.070499), 843: (42.345084, -71.147113), 844: (42.313593, -71.063012), 845: (42.313078, -71.070312), 846: (42.31621, -71.06787), 847: (42.313283, -71.065825), 848: (42.315865, -71.070174), 849: (42.3027582, -71.09492479361211), 850: (42.361484450000006, -71.06233234301364), 851: (42.2396472, -71.1336725), 852: (42.281906, -71.082379), 854: (42.2790152, -71.0803359), 855: (42.2785, -71.079282), 856: (42.315999, -71.072955), 857: (42.327637, -71.073942), 858: (42.317782, -71.07174), 859: (42.316935, -71.071784), 861: (42.317297, -71.076494), 862: (42.264677, -71.108274), 863: (42.31966, -71.06878), 865: (42.314946, -71.063214), 866: (42.277576, -71.068016), 867: (42.298285, -71.064756), 868: (42.3017188, -71.0851878), 869: (42.29972, -71.079887), 870: (42.303422, -71.06956), 872: (42.344119, -71.145116), 873: (42.344594, -71.149018), 874: (42.2501988, -71.111043), 875: (42.283512, -71.126244), 876: (42.325718, -71.07002), 877: (42.3406301, -71.0571031), 878: (42.3483265, -71.0538393), 879: (42.303253, -71.079907), 880: (42.30217, -71.08118), 881: (42.2986854, -71.0829293), 882: (42.3004224, -71.0847041), 883: (42.299746, -71.085252), 884: (42.271332, -71.088133), 885: (42.2979763, -71.1148599), 886: (42.2788077, -71.1202505), 887: (42.314769, -71.064602), 888: (42.312221, -71.0661259), 889: (42.311781, -71.06503), 890: (42.311736, -71.066621), 891: (42.3158007, -71.0637125), 892: (42.311521, -71.061182), 893: (42.3151305, -71.0608956), 894: (42.3152563, -71.063885), 895: (42.3285986, -71.0540247), 896: (42.2950241, -71.0904109), 897: (42.345022, -71.071817), 898: (42.281978, -71.083398), 899: (42.28275, -71.078379), 901: (42.314706, -71.094976), 902: (42.38601, -71.00574), 903: (42.382893, -70.99819), 904: (42.3885743, -71.0007933), 905: (42.38857, -70.9993668), 906: (42.366797500000004, -71.06786893235811)}
    street_hashmap = {0: 'Draper St', 1: 'Ditson St', 2: 'Perkins St', 3: 'Moraine St', 4: 'Tremont St', 5: 'Charles St', 6: 'Walnut St', 7: 'Lawn St', 8: 'Fisher Ave', 9: 'East First St', 10: 'East Second St', 11: 'Centre St', 12: 'Melville Ave', 13: 'Walnut Ave', 14: 'Harold St', 15: 'Cheslea St', 16: 'Princeton St', 17: 'Bowdoin St', 18: 'Bowdoin Ave', 19: 'Talbot Ave', 20: 'Dorchester Ave', 21: 'West Canton St', 22: 'Lamartine St', 23: 'Washington St', 24: 'Morton St', 25: 'Maryknoll St', 26: 'Commonwealth Ave', 27: 'Chiswick Rd', 28: 'Merchants Row', 29: 'Commercial St', 30: 'Boylston St', 31: 'Porter St', 32: 'Mozart St', 33: 'Dimock St', 34: 'School St', 35: 'Moulton St', 36: 'Medford St', 37: 'Gladeside Ave', 38: 'Ridgeview Ave', 39: 'Quincy St', 40: 'Columbia Rd', 41: 'David G Mugar Way', 42: 'Market St', 43: 'South Hobbart St', 44: 'Blue Hill Ave', 45: 'Normandy St', 46: 'Sumner St', 47: 'Geneva Ave', 48: 'Cambridge St', 49: 'Myrtle St', 50: 'Beacon St', 51: 'Beaver Pl', 52: 'Alford St', 53: 'Somerville Town Line', 54: 'Chauncy St', 55: 'Summer St', 56: 'Massachusetts Ave', 57: 'Dalton St', 58: 'Oakland St', 59: 'Nashua St', 60: 'Parker Hill Ave', 61: 'State St', 62: 'Milk St', 63: 'Arlington St', 64: 'Hereford St', 65: 'Prescott St', 66: 'Crescent Ave', 67: 'Sydney St', 68: 'Olney St', 69: 'Melcher St', 70: 'Congress St', 71: 'Maverick St', 72: 'Perrin St', 73: 'Dudley St', 74: 'Winthrop St', 75: 'Lowney Way', 76: 'Dead End', 77: 'Back St', 78: 'Grampian Way', 79: 'Caspian Way', 80: 'Chestnut Ave', 81: 'Curtis St', 82: 'Moore St', 83: 'Greenbrier St', 84: 'Woodrow Ave', 85: 'Callender St', 86: 'Park St', 87: 'Caldwell St', 88: 'Columbus Ave', 89: 'Leedsville St', 90: 'Adams St', 91: 'Waldeck St', 92: 'Raynor Cir', 93: 'Sojourner Truth Ct', 94: 'Hillside St', 95: 'Pontiac St', 96: 'Gorham St', 97: 'Kelton St', 98: 'Roland St', 99: 'Bunker Hill St', 100: 'Montrose St', 101: 'Copeland St', 102: 'Merrimac St', 103: 'North Washington St', 104: 'Florence St', 105: 'Ashmont St', 106: 'Wrentham St', 107: 'Harvard Ave', 108: 'Everett St', 109: 'Englewood Ave', 110: 'Chestnut Hill Ave', 111: 'Milford St', 112: 'Hanson St', 113: 'River St', 114: 'Dayton St', 115: 'Temple St', 116: 'Eldon St', 117: 'Nottingham St', 118: 'Humboldt Ave', 119: 'Elm Hill Ave', 120: 'D St', 121: 'Dorchester St', 122: 'Brighton Av', 123: 'Ashford St', 124: 'Southampton St', 125: 'Topeka St', 126: 'Creighton St', 127: 'South Huntington Ave', 128: 'Willis St', 129: 'East Cottage St', 130: 'Sanford St', 131: 'Monson St', 132: 'Mount Ida Rd', 133: 'Warren St', 134: 'Songin Father Anthony Way', 135: 'Melbourne St', 136: 'Faneuil St', 137: 'Hendry St', 138: 'Main St', 139: 'Norfolk St', 140: 'Auburn Sq', 141: 'Belfort St', 142: 'Savin Hill Ave', 143: 'Walk Hill St', 144: 'Neptune Rd', 145: 'Saratoga St', 146: 'Oakview Ter', 147: 'Rutherford Ave', 148: 'Chelsea St', 149: 'Allerton St', 150: 'Derne St', 151: 'Moreland St', 152: 'Hanover St', 153: 'Blossom St', 154: 'Emerson Pl', 155: 'Tucker St', 156: 'Don St', 157: 'Irma St', 158: 'Jamaicaway', 159: 'Bakersfield St', 160: 'High St', 161: 'Bartlett St', 162: 'Eustis St', 163: 'Forest St', 164: 'Claremont St', 165: 'Crescent St', 166: 'Brookline Town Line', 167: 'Barry St', 168: 'Burroughs St', 169: 'Eliot St', 170: 'New Rutherford Ave', 171: 'Causeway St', 172: 'Torrey St', 173: 'Arcadia St', 174: 'Kingston St', 175: 'Harrison Avenue Ext', 176: 'Edgerly Rd', 177: 'Hemenway St', 178: 'Franklin St', 179: 'East St', 180: 'South St', 181: 'Green St', 182: 'Newbury St', 183: 'Stuart St', 184: 'Fenway', 185: 'Park Dr', 186: 'Saxton St', 187: 'Bennington St', 188: 'Mount Vernon', 189: 'Orkney Rd', 190: 'Berkeley St', 191: 'Linden St', 192: 'Babcock St', 193: 'Meridian St', 194: 'Paul Gore St', 195: 'Brookway Rd', 196: 'Williams St', 197: 'Delle Ave', 198: 'Stoughton St', 199: 'St James St', 200: 'Regent St', 201: 'Powers St', 202: 'Herald St', 203: 'Randolph St', 204: 'Atherton St', 205: 'Walden St', 206: 'Round Hill St', 207: 'William F. McClellan Hwy', 208: 'Willowwood St', 209: 'Harvard St', 210: 'Melnea Cass Blvd', 211: 'Somerset St', 212: 'Carleton St', 213: 'Selkirk Rd', 214: 'West Walnut Park', 215: 'White St', 216: 'Laurel St', 217: 'Amory St', 218: 'Archdale Rd', 219: 'Ronald St', 220: 'Armstrong St', 221: 'New Chardon St', 222: 'East Fourth St', 223: 'Thomas Park', 224: 'Brighton Ave', 225: 'Binford St', 226: 'Parsons St', 227: 'Goodenough St', 228: 'Islington St', 229: 'Imrie Rd', 230: "William Cardinal O'Connell Way", 231: 'Armington St', 232: 'Atkinson St', 233: 'Alpine St', 234: 'Richfield St', 235: 'North St', 236: 'Monument Sq', 237: 'Sullivan St', 238: 'Walker St', 239: 'Hawkins St', 240: 'Lindall St', 241: 'Fenwood Rd', 242: 'Francis St', 243: 'C St', 244: 'E St', 245: 'Kneeland St', 246: 'Frontenac St', 247: 'South Sydney St', 248: 'Maffa Way', 249: 'Central St', 250: 'Huntington Ave', 251: 'Exeter St', 252: 'Central Sq', 253: 'Spruce St', 254: 'Charlesgate East', 255: 'Wyman St', 256: 'Essex St', 257: 'Freeport St', 258: 'Newton Town Line', 259: 'East Seventh St', 260: 'East Eighth St', 261: 'Atlantic Ave', 262: 'Canal St', 263: 'Joy St', 264: 'EVERETT TOWN LINE', 265: 'Hampden St', 266: "Upham's Ct", 267: 'Douglass Park', 268: 'Lewis Wharf', 269: 'East Broadway', 270: 'William J. Day Blvd', 271: 'Neponset Ave', 272: 'I St', 273: 'Brookline Ave', 274: 'Kenmore St', 275: 'Pleasant St', 276: 'East Eagle St', 277: 'Water St', 278: 'East Service Road', 279: 'Sudbury St', 280: 'Salem St', 281: 'Cummings Rd', 282: 'G St', 283: 'K St', 284: 'Westville St', 285: 'Marginal St', 286: 'Lomasney Way', 287: 'Holborn St', 288: 'Gaston St', 289: 'Lucerne St', 290: 'Court St', 291: 'Sheridan St', 292: 'East Concord St', 293: 'East Newton St', 294: 'Day St', 295: 'Babson St', 296: 'West Selden St', 297: 'West First St', 298: 'Farragut Rd', 299: 'Corey Rd', 300: 'Chaucer St', 301: 'Sawyer Ave', 302: 'Broad St', 303: 'India St', 304: 'West Broadway', 305: 'Mascoma St', 306: 'Egleston St', 307: 'Belvidere St', 308: 'North Grove St', 309: 'Hawley St', 310: 'Devonshire St', 311: 'Cookson Ter', 312: 'Faunce Rd', 313: 'Albany St', 314: 'L St', 315: 'Calumet St', 316: 'Southern Ave', 317: 'SW Corridor Path', 318: 'Monsignor Patrick J Lydon Way', 319: 'Mallet St', 320: 'Minden St', 321: 'Nixon St', 322: 'Clementine Park', 323: 'Border St', 324: 'Havre St', 325: 'Vine St', 326: 'Harrison Ave', 327: 'Roach St', 328: 'Crossman St', 329: 'Rugg Rd', 330: 'Bradford Rd', 331: 'Parker St', 332: 'Vaughan Ave', 333: 'Fremont St', 334: 'Dania St', 335: 'Shawmut Ave', 336: 'Clayton St', 337: 'Hancock St', 338: 'Von Hillern St', 339: 'Mt Pleasant Ave', 340: 'Auckland St', 341: 'West Ninth St', 342: 'Lark St', 343: 'Charter St', 344: 'Treadway Rd', 345: 'Highland St', 346: 'Lambert Ave', 347: 'Arlington Ave', 348: 'Bruce St', 349: 'Guild Row', 350: 'Ormond St', 351: 'Wellington Hill St', 352: 'Mascot St', 353: 'Greenwich St', 354: 'Leonard St', 355: 'Harriet St', 356: 'Madeline St', 357: 'Fayston St', 358: 'Putnam St', 359: 'Glendon St', 360: 'Whitfield St', 361: 'Aspen St', 362: 'Surrey St', 363: 'Fellows St', 364: 'Mercer St', 365: 'Brainerd Rd', 366: 'Hiawatha Rd', 367: 'N St', 368: 'Poplar St', 369: 'Firth Rd', 370: 'King St', 371: 'Lawrence Ave', 372: 'Intervale St', 373: 'Cross St', 374: 'Lewis St', 375: 'M St', 376: 'Church St', 377: 'Winter St', 378: 'Russell St', 379: 'Gay Head St', 380: 'Duncan St', 381: 'Haviland St', 382: 'Westland Ave', 383: 'Pond St', 384: 'Florida St', 385: 'Granfield Ave', 386: 'East Third St', 387: 'West Fourth St', 388: 'Rosseter St', 389: 'Sunset St', 390: 'Ridgemont St', 391: 'Seaver St', 392: 'Roxbury St', 393: 'Malcolm X Blvd', 394: 'Sagamore St', 395: 'Paris St', 396: 'Sutherland Rd', 397: 'Circuit St', 398: 'Bragdon St', 399: 'Tibbetts Town Way', 400: 'Dewitt Dr', 401: 'Priesing St', 402: 'Withington St', 403: 'Magazine St', 404: 'Orleans St', 405: 'Jeffries St', 406: 'North Beacon St', 407: 'Braintree St', 408: 'West Eighth St', 409: 'Riverway', 410: 'Cummins Hwy', 411: 'Oak Square Ave', 412: 'Msgr Jacobbe Rd', 413: 'Hamilton St', 414: 'Kilsyth Rd', 415: 'Lanark Rd', 416: 'New England Ave', 417: 'Mattapan St', 418: 'Messinger St', 419: 'Clarendon St', 420: 'Dartmouth St', 421: 'Haverford St', 422: 'Brookside Ave', 423: 'Hillsboro Rd', 424: 'Westmore Rd', 425: 'Donwood Ter', 426: 'Topliff St', 427: 'Condor St', 428: "St Mark's Rd", 429: 'Hollander St', 430: 'Spofford Rd', 431: 'Allston St', 432: 'Seaverns Ave', 433: 'Terrace St', 434: 'Geneva St', 435: 'Buttonwood St', 436: 'Fawndale Rd', 437: 'Harborview St', 438: 'Westminster St', 439: 'Warwick St', 440: 'Courtland Rd', 441: 'Magnolia St', 442: 'Glenville Ave', 443: 'Purchase St', 444: 'Dane St', 445: 'West Seventh St', 446: 'Nira Ave', 447: 'Old Colony Ave', 448: 'Mitchell St', 449: 'Park Plz', 450: 'Thomas St', 451: 'Delhi St', 452: 'Harrishof St', 453: 'Dennison St', 454: 'Pond View Ave', 455: 'Homes Ave', 456: 'Blackstone St', 457: 'Fleet St', 458: 'Marine Rd', 459: 'Harold Park', 460: 'Holworthy St', 461: 'South Hobart St', 462: 'East Berkeley St', 463: 'East Lenox St', 464: 'Traveler St', 465: 'East Brookline St', 466: 'Wadsworth St', 467: 'City Sq', 468: 'Hudson St', 469: 'Bardwell St', 470: 'Cornwall St', 471: 'Union St', 472: 'Austin St', 473: 'George R. Visconti Rd', 474: 'Bowker St', 475: 'Arch St', 476: 'Tremlett St', 477: 'Townsend St', 478: 'Maverick Sq', 479: 'West Tremlett St', 480: 'Fottler Rd', 481: 'Gordon St', 482: 'Aspinwall Rd', 483: 'Federal St', 484: 'Farrington Ave', 485: 'Cedar St', 486: 'Linwood St', 487: 'Murray Hill Rd', 488: 'Meadowbank Ave', 489: 'Catawba St', 490: 'Rockland St', 491: 'Dale St', 492: 'Viking Ter', 493: 'Beach St', 494: 'Snow Hill St', 495: 'Brimmer St', 496: 'Highland Ave', 497: 'Howe Ter', 498: 'Huntington Ave Underpass', 499: 'Wallingford Rd', 500: 'Wainwright St', 501: 'Reedsdale St', 502: 'Manchester St', 503: 'High Rock Way', 504: 'Norton St', 505: 'Estey St', 506: 'Bucknam St', 507: 'Sachem St', 508: 'Thornton St', 509: 'Cotting St', 510: 'Juliette St', 511: 'Jones Ave', 512: 'Ballou Ave', 513: 'Arborway', 514: 'Mt Vernon Pl', 515: 'Fox St', 516: 'Crawford St', 517: 'Bellevue St', 518: 'Stanley St', 519: 'Lenox St', 520: 'Medfield St', 521: 'Van Ness St', 522: 'Price Rd', 523: 'Woolson St', 524: 'Standish St', 525: 'Wales St', 526: 'Edinboro St', 527: 'Foster St', 528: 'Knapp St', 529: 'Lake St', 530: 'Kenrick St', 531: 'Webster St', 532: 'Colliston Rd', 533: 'Kinross Rd', 534: 'Leston St', 535: 'Ipswich St', 536: 'Telegraph St', 537: 'Sullivan Square', 538: 'Millet St', 539: 'Pine St', 540: 'Oak St', 541: 'Springdale St', 542: 'South Bremen St', 543: 'Percival St', 544: 'Henshaw St', 545: 'Germania St', 546: 'Bay St', 547: 'Mountain Ave', 548: 'Parkman St', 549: 'West St', 550: 'Avery St', 551: 'St Botolph St', 552: 'Allstate Rd', 553: 'Proctor St', 554: 'Lyndhurst St', 555: 'Almont St', 556: 'New St', 557: 'Bismarck St', 558: 'Mead St', 559: 'Nottinghill Rd', 560: 'Deer St', 561: 'Dalrymple St', 562: 'Groveland St', 563: 'Standard St', 564: 'Chatham St', 565: 'Minton St', 566: 'Portland St', 567: 'Lyndeboro St', 568: 'Theodore St', 569: 'Long Ave', 570: 'Bremen St', 571: 'Cottage St', 572: 'Stockwell St', 573: 'East Sixth St', 574: 'Brooks St', 575: 'Sturbridge St', 576: 'Robinson St', 577: 'Monument St', 578: 'Monument Ave', 579: 'Marion St', 580: 'American Legion Hwy', 581: 'Mallon Rd', 582: 'Bernard St', 583: 'Lincoln St', 584: 'Grotto Glen Rd', 585: 'Sigourney St', 586: 'Waverly St', 587: 'Constitution Rd', 588: 'Irving St', 589: 'West Cedar St', 590: 'Stillman St', 591: 'Endicott St', 592: 'North Sq', 593: 'Eagle Sq', 594: 'Lawrence St', 595: 'Richmond St', 596: 'Mather St', 597: 'Speedwell St', 598: 'Charlesgate West', 599: 'Hano St', 600: 'Bullard St', 601: 'Tyler St', 602: 'Crowell St', 603: 'Boyden St', 604: 'Lyford St', 605: 'Wait St', 606: 'Preble Street', 607: 'Mt Vernon St', 608: 'Preble St', 609: 'Morrissey  William T Blvd', 610: 'Newmarket Sq', 611: 'Wilder St', 612: 'St Stephen St', 613: 'Strathmore Rd', 614: 'Bromfield St', 615: 'Brighton St', 616: 'Tiverton Rd', 617: '191 Park Dr', 618: 'Peterborough St', 619: 'Common St', 620: 'Norwell St', 621: 'Heath St', 622: 'Ward St', 623: 'Gove St', 624: 'Stratton St', 625: 'Middlesex St', 626: 'Theodore A. Glynn Way', 627: 'Wellington Pl', 628: 'Waltham St', 629: 'Gordon Ave', 630: 'Turtle Pond Pkwy', 631: 'Sherman St', 632: 'Brinsley St', 633: 'Morse St', 634: 'Kilmarnock St', 635: 'Spalding St', 636: 'Forest Hills St', 637: 'Elmwood St', 638: 'Pearl St', 639: 'Newland St', 640: 'Sudan St', 641: 'Prince St', 642: 'Boardman St', 643: 'Shelby St', 644: 'Hubbardston Rd', 645: 'Romsey St', 646: 'St Cecelia St', 647: 'Decatur St', 648: 'Polk St', 649: 'Welles Ave', 650: 'Kenwood St', 651: 'Northern Ave', 652: 'Elm St', 653: 'West Dedham St', 654: 'Lexington St', 655: 'Glen Rd', 656: 'St Alphonsus St', 657: 'West Park St', 658: 'Brook Marshall Rd', 659: 'Kerr Pl', 660: 'Ashburton Pl', 661: 'Ledgebrook Rd', 662: 'Edgewood St', 663: 'Bynner St', 664: 'Rosemary St', 665: 'Speare Pl', 666: 'Chestnut St', 667: 'Shawmut St', 668: 'Harcourt St', 669: 'Montgomery St', 670: 'Hartland St', 671: 'Savin St', 672: 'Norway St', 673: 'Devon St', 674: 'H St', 675: 'Coleman St', 676: 'Clarkson St', 677: 'St James Ave', 678: 'Stanhope St', 679: 'Westview St', 680: 'Ames St', 681: 'Charles Street South', 682: 'Woodgate St', 683: 'Woodbole Ave', 684: 'Cahners Pl', 685: 'Lynde St', 686: 'Hammond St', 687: 'Wall St', 688: 'O St', 689: 'Moseley St', 690: 'La Grange St', 691: 'Dwight St', 692: 'Cameron St', 693: 'Carolina Ave', 694: 'Child St', 695: 'New Heath St', 696: 'Middleton St', 697: 'Wentworth St', 698: 'Guild St', 699: 'Marcella St', 700: 'Frawley St', 701: 'Kirkwood Rd', 702: 'Ruggles St', 703: 'Wabeno St', 704: 'Gerard St', 705: 'Kemble St', 706: 'Pembroke St', 707: 'Pevear Pl', 708: 'Wellington Ct', 709: 'Windsor St', 710: 'Marginal Rd', 711: 'Temple Pl', 712: 'Willet St', 713: 'Dedham Town Line', 714: 'Brookley Rd', 715: 'Bigelow St', 716: 'Winship St', 717: 'Rockwell St', 718: 'Batterymarch St', 719: 'Wharf St', 720: 'Custom House St', 721: 'Waumbeck St', 722: 'Dunbar Ave', 723: 'B St', 724: 'Aguadilla St', 725: 'Warren Av', 726: 'San Juan St', 727: 'Phillips St', 728: 'Mt Vernon', 729: 'Sunnyside St', 730: 'Deering Rd', 731: 'Hazleton St', 732: 'Trenton St', 733: 'Cabot St', 734: 'North Bennet St', 735: 'Tileston St', 736: 'O Street', 737: 'Shore Rd', 738: 'I Street', 739: 'Westwood St', 740: 'Puritan Ave', 741: 'Roys St', 742: 'Staniford St', 743: 'Milton Av', 744: 'West Cottage St', 745: 'SUSI YARD', 746: 'Charles Street Fw', 747: 'Claybourne St', 748: 'Wayland St', 749: 'Castleton St', 750: 'Dearborn St', 751: 'Malden St', 752: 'Warrenton Pl', 753: 'St Thomas Moore Rd', 754: 'Thorn St', 755: 'Fairmount Ave', 756: 'Massasoit St', 757: 'Maywood St', 758: 'Kemp St', 759: 'Gallivan Blvd', 760: 'Beech St', 761: 'Burnett St', 762: 'Bird St', 763: 'Hutchings St', 764: 'Stanwood St', 765: 'Wyoming St', 766: 'Whittier St', 767: 'Arrow St', 768: 'North Margin St', 769: 'Fifth St', 770: 'Sixteenth St', 771: 'Sixth St', 772: 'Ninth St', 773: 'First Ave', 774: 'Third Ave', 775: 'Colmubus Ave', 776: 'Forsyth Way', 777: 'Mount Vernon St', 778: 'Forest Hill St', 779: 'Hanover', 780: 'End of Street', 781: 'N. Washington', 782: 'Atlantic', 783: 'North Washington', 784: 'North Square', 785: 'Fleet ', 786: 'Fleet', 787: 'Salem', 788: 'Pinckney St', 789: 'Maple Place', 790: 'Harrrison Ave', 791: 'Revere St', 792: 'Public Alley 301', 794: 'May St', 795: 'VFW Pkwy', 796: 'Moseley Street', 797: 'Crescent Avenue', 798: 'Freeport Street', 799: 'Dorchester Avenue', 800: 'Park Street', 801: 'Columbia Road', 802: 'Bellevue Street', 803: 'Hancock Street', 804: 'Glendale Street', 805: 'Davern Street', 806: 'Bowdoin Street', 807: 'Ashmont Street', 808: 'Washington Street', 809: 'Glenarm St', 810: 'Glenarm Street', 811: 'Seaver Street', 812: 'Erie Street', 813: 'Glenway Street', 814: 'Harvard Street', 815: 'Bowdoin Avenue', 816: 'Geneva Avenue', 817: 'Blue Hill Avenue', 818: 'Howard Street', 819: 'Julian Street', 820: 'Boxford Street', 821: 'Quincy Street', 822: 'Brookford Street', 823: 'West Cottage Street', 824: 'Dudley Street', 825: 'East Cottage Street', 826: 'East Cottage', 827: 'Humphreys Street', 828: 'Wendover Street', 829: 'Elm Hill Street', 830: 'Maple Street', 831: 'Georgia Street', 832: 'Elm Hill Avenue', 833: 'Kneeland Street', 834: 'Harrison Avenue', 835: 'Colburne Street', 836: 'Parson St', 837: 'Brookline line', 838: 'Brainerd Road', 839: 'Dead end', 840: 'Dakota St', 841: 'Corona St', 842: 'Constitition Rd', 843: 'Monastery Rd', 844: 'Cushing Ave', 845: 'Bodwell St', 846: 'Virginia St', 847: 'Glendale St', 848: 'Alexander St', 849: 'Franklin Park', 850: 'Cushing St', 851: 'Milton St', 852: 'Nelson St', 853: 'Seldon St', 854: 'Fairmount St', 855: 'Wilmington St', 856: 'Hartford St', 857: 'Howard St', 858: 'Robin Hood St', 859: 'Lingard St', 860: 'Hartfold St', 861: 'Dacia St', 862: 'George St', 863: 'Clifton St', 864: 'Washingston St', 865: 'Everett Ave', 866: 'Valley Rd', 867: 'Vinson St', 868: 'Glenway St', 869: 'Greenwood St', 870: 'Levant St', 871: 'Gevena Ave', 872: 'Claymoss Rd', 873: 'Colborne Rd', 874: 'Milton Ave', 875: 'Sycamore St', 876: 'Norfolk Ave', 877: 'A St', 878: 'Fort Point Channel', 879: 'Merrill St', 880: 'Erie St', 881: 'Bradshaw St', 882: 'McLellan St', 883: 'Charlotte St', 884: 'Linvale Ter', 885: 'Hyde Park Ave', 886: 'Canterbury St', 887: 'Jerome St', 888: 'Trull St', 889: 'Rill St', 890: 'Ware St', 891: 'Mount Cushing Ter', 892: 'Downer Ave', 893: 'Salcombe St', 894: 'Upham Ave', 895: 'Devine Way', 896: 'Franklin Hill Ave', 897: 'Warren Ave', 898: 'Corbet St', 899: 'Evans St', 900: 'Westminister Ave', 901: 'Walnut Park', 902: 'Barnes Ave', 903: 'Annavoy St', 904: 'Leyden St', 905: 'Austin Ave', 906: 'Leverett St'}

    # -- Euclidean
    directions, distance, time, dest_time, current_time = astar('Ditson St', 'Pinckney St', 'Euclidean','high')
    if len(directions) < 2:
        print('Directions using A-star Algorithm: ' + 'Cannot find a suitable path!')
    else: 
        print('Directions using A-star Algorithm, Euclidean Distance: ' + str(directions))
    print('Total distance to your destination according to A-star using Euclidean Distance will be about: ' + str(distance) + ' miles')

    print('If you leave now at ' + str(current_time) + ', you will reach your destination in about ' + str(time) + ' minutes, at about: ' + str(dest_time))
    # print(timeit.timeit("astar('Washington St', 'Charlotte St', 'Euclidean')", setup="from __main__ import astar, Euclidean", number=10)/10)
    # -- Manhatan
    # directions, distance, time = astar('Washington St', 'Canterbury St', 'Manhatan')
    # if len(directions) < 2:
    #     print('Directions using A-star Algorithm: ' + 'Cannot find a suitable path!')
    # else: 
    #     print('Directions using A-star Algorithm, Manhatan Distance: ' + str(directions))
    # print('Total distance to your destination according to A-star using Manhatan Distance will be about: ' + str(distance) + ' miles')
    # print(timeit.timeit("astar('Washington St', 'Charlotte St', 'Manhatan')", setup="from __main__ import astar, Euclidean", number=10)/10)
    # print('Directions using Networkx Algorithm: ' + str(nx.astar_path(G, 'Florence St', 'Walnut Ave')))